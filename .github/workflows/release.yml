name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: climonitor-linux-x86_64
            binary_ext: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: climonitor-macos-aarch64
            binary_ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: climonitor-windows-x86_64
            binary_ext: ".exe"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: Swatinem/rust-cache@v2

      - name: Install protobuf compiler (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install protobuf compiler (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Install protobuf compiler (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive directory
        run: mkdir -p release/

      - name: Copy binaries
        run: |
          cp target/${{ matrix.target }}/release/climonitor${{ matrix.binary_ext }} release/
          cp target/${{ matrix.target }}/release/climonitor-launcher${{ matrix.binary_ext }} release/

      - name: Create archive
        run: |
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell Compress-Archive -Path climonitor.exe,climonitor-launcher.exe -DestinationPath ${{ matrix.asset_name }}.zip
          else
            tar czf ${{ matrix.asset_name }}.tar.gz climonitor climonitor-launcher
          fi
        shell: bash
          
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/${{ matrix.asset_name }}.tar.gz
            release/${{ matrix.asset_name }}.zip