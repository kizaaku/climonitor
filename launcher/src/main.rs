use anyhow::Result;
use clap::{Arg, Command};

// lib crate „Åã„Çâ import
use climonitor_launcher::cli_tool::{CliToolFactory, CliToolType};
use climonitor_launcher::tool_wrapper::ToolWrapper;
use climonitor_launcher::transport_client::LauncherClient;
use climonitor_shared::Config;

#[tokio::main]
async fn main() -> Result<()> {
    let matches = Command::new("climonitor-launcher")
        .version(env!("CARGO_PKG_VERSION"))
        .about("Launch Claude Code or Gemini CLI with real-time session monitoring")
        .arg(
            Arg::new("verbose")
                .short('v')
                .long("verbose")
                .help("Enable verbose output")
                .action(clap::ArgAction::SetTrue),
        )
        .arg(
            Arg::new("log_file")
                .long("log-file")
                .help("Log file path to save CLI tool output")
                .value_name("FILE"),
        )
        .arg(
            Arg::new("tcp")
                .long("tcp")
                .help("Use TCP connection instead of Unix domain socket")
                .action(clap::ArgAction::SetTrue),
        )
        .arg(
            Arg::new("connect")
                .long("connect")
                .help("Connection address (TCP: host:port, Unix: socket path)")
                .value_name("ADDR"),
        )
        .arg(
            Arg::new("config")
                .short('c')
                .long("config")
                .help("Configuration file path")
                .value_name("FILE"),
        )
        .arg(
            Arg::new("cli_args")
                .help("CLI tool and arguments (e.g., 'claude --help' or 'gemini chat')")
                .num_args(0..)
                .trailing_var_arg(true)
                .allow_hyphen_values(true),
        )
        .get_matches();

    let verbose = matches.get_flag("verbose");
    let log_file = matches
        .get_one::<String>("log_file")
        .map(std::path::PathBuf::from);
    let use_tcp = matches.get_flag("tcp");
    let connect_addr = matches.get_one::<String>("connect");
    let config_path = matches
        .get_one::<String>("config")
        .map(std::path::PathBuf::from);
    let cli_args: Vec<String> = matches
        .get_many::<String>("cli_args")
        .unwrap_or_default()
        .map(|s| s.to_string())
        .collect();

    // CLI „ÉÑ„Éº„É´„Çø„Ç§„Éó„ÇíÂà§ÂÆö
    let (tool_type, tool_args) = if let Some(first_arg) = cli_args.first() {
        if let Some(cli_tool_type) = CliToolType::from_command(first_arg) {
            (cli_tool_type, cli_args[1..].to_vec())
        } else {
            // „Éá„Éï„Ç©„É´„Éà„ÅØClaudeÔºàÂæåÊñπ‰∫íÊèõÊÄßÔºâ
            (CliToolType::Claude, cli_args)
        }
    } else {
        // ÂºïÊï∞„Å™„Åó„ÅÆÂ†¥Âêà„ÅØClaude
        (CliToolType::Claude, vec![])
    };

    if verbose {
        println!("üîß climonitor-launcher starting...");
        println!("üõ†Ô∏è  Tool: {tool_type:?}");
        println!("üìù Args: {tool_args:?}");
    }

    // Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„ÅøÔºàÂÑ™ÂÖàÈ†Ü‰Ωç: CLI > Áí∞Â¢ÉÂ§âÊï∞ > Ë®≠ÂÆö„Éï„Ç°„Ç§„É´ > „Éá„Éï„Ç©„É´„ÉàÔºâ
    let mut config = if let Some(config_path) = &config_path {
        // --config „ÅßÊåáÂÆö„Åï„Çå„ÅüË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
        Config::from_file(config_path)?
    } else if let Some((config, _path)) = Config::load_auto()? {
        // Ëá™ÂãïÊ§úÂá∫„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
        config
    } else {
        // „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„Çí‰ΩøÁî®
        Config::default()
    };

    // Áí∞Â¢ÉÂ§âÊï∞„Åß‰∏äÊõ∏„Åç
    config.apply_env_overrides();

    // CLIÂºïÊï∞„Åß‰∏äÊõ∏„Åç
    if use_tcp {
        config.connection.r#type = "tcp".to_string();
        if let Some(addr) = connect_addr {
            config.connection.tcp_bind_addr = addr.to_string();
        }
    } else if let Some(addr) = connect_addr {
        if addr.starts_with("tcp://") {
            config.connection.r#type = "tcp".to_string();
            config.connection.tcp_bind_addr = addr.strip_prefix("tcp://").unwrap().to_string();
        } else {
            config.connection.r#type = "unix".to_string();
            config.connection.unix_socket_path = Some(addr.into());
        }
    }
    if verbose {
        config.logging.verbose = true;
    }
    if let Some(log_file_path) = log_file.clone() {
        config.logging.log_file = Some(log_file_path);
    }

    // Êé•Á∂öË®≠ÂÆö„ÇíÁîüÊàê
    let connection_config = config.to_connection_config();

    if verbose {
        println!("üîß Connection config: {connection_config:?}");
    }

    // „ÉÑ„Éº„É´„Çí‰ΩúÊàê
    let cli_tool = CliToolFactory::create_tool(tool_type);
    
    // ‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂèñÂæó„Åó„Å¶null terminator„ÇíÈô§Âéª
    let current_dir = std::env::current_dir()?;
    let working_dir = {
        let path_str = current_dir.to_string_lossy();
        // WindowsÁí∞Â¢É„Åß„ÅÆnull terminatorÂïèÈ°å„ÇíÂõûÈÅø
        let clean_path = path_str.trim_end_matches('\0');
        std::path::PathBuf::from(clean_path)
    };
    
    let tool_wrapper = ToolWrapper::new(cli_tool, tool_args).working_dir(working_dir);

    // Launcher „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çí‰ΩúÊàêÔºàÊé•Á∂ö„ÅØÂÜÖÈÉ®„ÅßËá™ÂãïÂÆüË°åÔºâ
    let mut launcher = LauncherClient::new(
        tool_wrapper,
        connection_config,
        config.logging.verbose,
        config.logging.log_file,
    )
    .await?;

    // monitorÊé•Á∂öÊôÇ„ÅÆ„Åø„Çø„Éº„Éü„Éä„É´„Ç¨„Éº„Éâ‰ΩúÊàê
    #[cfg(unix)]
    let _terminal_guard = if launcher.is_connected() {
        use climonitor_launcher::transport_client::create_terminal_guard_global;
        Some(create_terminal_guard_global(config.logging.verbose)?)
    } else {
        None
    };

    // SIGINT/SIGTERM „Éè„É≥„Éâ„É©„Éº„ÇíË®≠ÂÆö„Åó„Å¶„Çø„Éº„Éü„Éä„É´Âæ©ÂÖÉ„Çí‰øùË®º
    #[cfg(unix)]
    {
        let mut sigint = tokio::signal::unix::signal(tokio::signal::unix::SignalKind::interrupt())?;
        let mut sigterm =
            tokio::signal::unix::signal(tokio::signal::unix::SignalKind::terminate())?;

        // CLI „ÉÑ„Éº„É´ „Éó„É≠„Çª„ÇπÂÆüË°å„Çí„Ç∑„Ç∞„Éä„É´Âá¶ÁêÜ„Å®‰∏¶Ë°å„Åó„Å¶ÂÆüË°å
        tokio::select! {
            result = launcher.run_claude() => {
                match result {
                    Ok(_) => {
                        if config.logging.verbose {
                            println!("‚úÖ CLI tool finished successfully");
                        }
                    }
                    Err(e) => {
                        eprintln!("‚ùå CLI tool execution failed: {e}");
                        #[cfg(unix)]
                        {
                            if let Some(guard) = _terminal_guard {
                                drop(guard); // „Çø„Éº„Éü„Éä„É´Ë®≠ÂÆö„ÇíÊòéÁ§∫ÁöÑ„Å´Âæ©ÂÖÉ
                            }
                            climonitor_launcher::transport_client::force_restore_terminal(); // Âº∑Âà∂Âæ©ÂÖÉ
                        }
                        std::process::exit(1);
                    }
                }
            }
            _ = sigint.recv() => {
                if config.logging.verbose {
                    println!("\nüõë Received SIGINT, shutting down gracefully...");
                }
                #[cfg(unix)]
                {
                    if let Some(guard) = _terminal_guard {
                        drop(guard); // „Çø„Éº„Éü„Éä„É´Ë®≠ÂÆö„ÇíÊòéÁ§∫ÁöÑ„Å´Âæ©ÂÖÉ
                    }
                    climonitor_launcher::transport_client::force_restore_terminal(); // Âº∑Âà∂Âæ©ÂÖÉ
                }
                std::process::exit(130); // 128 + 2 (SIGINT)
            }
            _ = sigterm.recv() => {
                if config.logging.verbose {
                    println!("\nüõë Received SIGTERM, shutting down gracefully...");
                }
                #[cfg(unix)]
                {
                    if let Some(guard) = _terminal_guard {
                        drop(guard); // „Çø„Éº„Éü„Éä„É´Ë®≠ÂÆö„ÇíÊòéÁ§∫ÁöÑ„Å´Âæ©ÂÖÉ
                    }
                    climonitor_launcher::transport_client::force_restore_terminal(); // Âº∑Âà∂Âæ©ÂÖÉ
                }
                std::process::exit(143); // 128 + 15 (SIGTERM)
            }
        }
    }

    #[cfg(not(unix))]
    {
        // ÈùûUnixÁí∞Â¢É„Åß„ÅØÈÄöÂ∏∏„ÅÆÂÆüË°å
        match launcher.run_claude().await {
            Ok(_) => {
                if config.logging.verbose {
                    println!("‚úÖ CLI tool finished successfully");
                }
            }
            Err(e) => {
                eprintln!("‚ùå CLI tool execution failed: {e}");
                std::process::exit(1);
            }
        }
    }

    if config.logging.verbose {
        println!("üëã climonitor-launcher finished");
    }

    Ok(())
}
